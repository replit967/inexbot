# handlers/admin.py

from core.globals import ADMIN_IDS
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import TelegramError

# ----- –ú–û–î–ï–†–ê–¶–ò–Ø -----
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        user_id = int(args[0])
        reason = " ".join(args[1:]) if len(args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        # TODO: –î–æ–±–∞–≤—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–Ω-–ª–∏—Å—Ç (globals.bans)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
            return
        user_id = int(args[0])
        # TODO: –£–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–Ω-–ª–∏—Å—Ç–∞
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")

async def clear_reports_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∂–∞–ª–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clearreports <user_id>")
            return
        user_id = int(args[0])
        # TODO: –û—á–∏—Å—Ç–∏—Ç—å –∂–∞–ª–æ–±—ã –Ω–∞ user_id
        await update.message.reply_text(f"–ñ–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∂–∞–ª–æ–±: {e}")

# ----- DEBUG/–¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ -----
async def debug_fill_5v5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ 5v5 –º–∞—Ç—á–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    # –ò–º–ø–æ—Ä—Ç –∏–∑ debug (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–º)
    from handlers.debug import debug_fill_5v5 as real_fill
    await real_fill(update, context)

async def debug_launch_match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∞—Ç—á–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    from handlers.debug import debug_launch_match as real_launch
    await real_launch(update, context)

async def debug_reset_ratings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    from handlers.debug import debug_reset_ratings as real_reset
    await real_reset(update, context)

# ----- –ó–ê–í–ï–†–®–ï–ù–ò–ï –ú–ê–¢–ß–ê –í–†–£–ß–ù–£–Æ -----
async def end_match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á –∏ –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    chat_id = update.effective_chat.id

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from core import globals
    found_match_id = None
    for match_id, match in globals.active_matches_5v5.items():
        if match.get('blue_chat_id') == chat_id or match.get('red_chat_id') == chat_id:
            found_match_id = match_id
            break

    if not found_match_id:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–∞—Ç—á—É.")
        return

    await update.message.reply_text("üèÅ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω –≤—Ä—É—á–Ω—É—é. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞...")

    from handlers.team_chat import cleanup_team_chats
    await cleanup_team_chats(found_match_id, context)
