# handlers/profile.py

import time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from core.rating import get_profile
from core import globals
from core.trust import recalculate_trust_score
from core.rating import get_rating
from core.infractions import register_clean_game
import asyncio
from core.names import load_names, save_names, load_nick_timestamps, save_nick_timestamps
from core.names import cache_username
from core.names import get_display_name, cache_username
from core.names import get_display_name_with_link




NAME_CHANGE_COOLDOWN = 30 * 24 * 60 * 60  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


WELCOME_MESSAGE = (
    "\U0001F3AE INEXmode ‚Äî —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ Mobile Legends. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n\n"
    "\U0001F3C6 –ò–≥—Ä–∞—Ç—å –≤ –º–∞—Ç—á–∞—Ö 1v1 –∏–ª–∏ 5v5 –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤\n"
    "\U0001F3AF –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ\n"
    "\U0001F91D –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã\n"
    "\U0001F6E1 –î–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞—Ç—á–µ–π —Å –Ω–∞–∑–Ω–∞—á–∞–µ–º—ã–º '–ª–∏–¥–µ—Ä–æ–º –ª–æ–±–±–∏'\n"
    "\U0001F4F1 –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram ‚Äî –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ\n\n"
    "\U0001F449 –ù–∞–∂–º–∏—Ç–µ /find, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞"
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE)


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    profile = get_profile(user_id)
    username = globals.names.get(user_id, f"ID {user_id}")
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:\n"
        f"{username}\n\n"
        f"üèÜ ELO: {profile['rating']}\n"
        f"‚úÖ –ü–æ–±–µ–¥: {profile['wins']}\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {profile['losses']}"
    )
    await update.message.reply_text(text)


async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from core.names import get_display_name
    import html

    user = update.effective_user
    cache_username(user)

    top_players = sorted(
        globals.ratings.items(),
        key=lambda x: x[1].get("rating", 1000),
        reverse=True
    )[:10]

    message = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"

    for index, (uid_str, data) in enumerate(top_players, start=1):
        uid = int(uid_str)
        name = get_display_name(uid)
        name = html.escape(name)  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
        rating = data.get("rating", 1000)

        name_with_link = f"<a href='tg://user?id={uid}'>{name}</a>"
        message += f"{index}. {name_with_link} ({rating} ELO)\n"

    # ‚ö† –ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    message += (
        "\nüîí –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤ Telegram"
    )

    await update.message.reply_text(message, parse_mode=ParseMode.HTML)




async def trust(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = globals.trust_data.get(user_id)
    if not data:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–∞—Å—Ç-—Ñ–∞–∫—Ç–æ—Ä—É.")
        return

    score = data.get("trust_score", 100)
    reports = data.get("reports", 0)
    clean = data.get("confirmed_matches", 0)
    afk = data.get("afk", 0)

    text = (
        f"üîê *–í–∞—à —Ç—Ä–∞—Å—Ç-—Ñ–∞–∫—Ç–æ—Ä:*\n\n"
        f"‚Ä¢ üíØ Trust Score: *{score}*\n"
        f"‚Ä¢ ‚ö†Ô∏è –ñ–∞–ª–æ–± –Ω–∞ –≤–∞—Å: *{reports}*\n"
        f"‚Ä¢ ‚úÖ –ß–µ—Å—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π: *{clean}*\n"
        f"‚Ä¢ üö´ AFK/–æ—Ç–∫–∞–∑–æ–≤: *{afk}*\n\n"
        f"_–ß–µ–º –≤—ã—à–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, —Ç–µ–º –Ω–∞–¥—ë–∂–Ω–µ–µ –≤—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã._"
    )

    await update.message.reply_text(text, parse_mode="Markdown")


async def get_display_name_async(user_id, context):
    nickname = globals.names.get(str(user_id))
    try:
        user = await context.bot.get_chat(user_id)
        username = f"@{user.username}" if user.username else None
    except:
        username = None
    if nickname and username:
        return f"{nickname} ({username})"
    elif nickname:
        return f"{nickname} (ID {user_id})"
    elif username:
        return username
    else:
        return f"ID {user_id}"


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_matches = []
    for match in globals.matches.values():
        player_ids = [str(pid) for pid in match.get("players", [])]
        if user_id in player_ids:
            user_matches.append(match)

    if not user_matches:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    user_matches = sorted(user_matches, key=lambda x: x["timestamp"], reverse=True)[:10]
    lines = ["üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π:\n"]

    for m in user_matches:
        mode = m.get("mode", "1v1")
        date = time.strftime("%Y-%m-%d %H:%M", time.gmtime(m["timestamp"]))
        win = str(m.get("winner")) == user_id
        result = "‚úÖ –ü–æ–±–µ–¥–∞" if win else "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"

        if mode == "1v1":
            opponent = [pid for pid in m["players"] if str(pid) != user_id][0]
            name = await get_display_name_async(opponent, context)
            lines.append(f"{result} –ø—Ä–æ—Ç–∏–≤ {name} ‚Äî {date}")
        else:
            lines.append(f"{result} –≤ 5v5 ‚Äî {date}")

    await update.message.reply_text("\n".join(lines), parse_mode="HTML")




async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    args = context.args
    now = time.time()

    last_changed = globals.name_change_timestamps.get(user_id)
    if last_changed and now - last_changed < NAME_CHANGE_COOLDOWN:
        remaining = int((NAME_CHANGE_COOLDOWN - (now - last_changed)) / 86400)
        await update.message.reply_text(f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ —á–µ—Ä–µ–∑ {remaining} –¥–Ω.")
        return

    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setname <–≤–∞—à_–Ω–∏–∫>")
        return

    new_name = " ".join(args).strip()
    if not new_name:
        await update.message.reply_text("–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if new_name in globals.names.values() and globals.names.get(user_id) != new_name:
        await update.message.reply_text("–≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º.")
        return

    globals.names[user_id] = new_name
    globals.name_change_timestamps[user_id] = now
    save_names()
    save_nick_timestamps()

    await update.message.reply_text(f"‚úÖ –í–∞—à –Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_name}")
