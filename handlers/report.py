# handlers/report.py

import time
import json
from telegram import Update
from telegram.ext import ContextTypes
from core.trust import recalculate_trust_score, save_trust
from core import globals


def load_report_log():
    try:
        with open("report_log.json", 'r') as f:
            globals.report_log = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        globals.report_log = {}
        save_report_log()


def save_report_log():
    with open("report_log.json", 'w') as f:
        json.dump(globals.report_log, f)


def resolve_user_id(identifier: str):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç user_id –ø–æ ID –∏–ª–∏ –Ω–∏–∫—É"""
    if identifier.isdigit():
        return int(identifier)
    for uid_str, nick in globals.names.items():
        if nick.lower() == identifier.lower():
            return int(uid_str)
    return None


async def report_player(reporter_id, target_id, reason="", context=None):
    now = int(time.time())
    ruid = str(reporter_id)
    tuid = str(target_id)

    key = f"{ruid}:{tuid}"
    last_time = globals.report_log.get(key, 0)
    if now - last_time < 86400:
        return "already_reported"

    globals.report_log[key] = now
    save_report_log()

    if tuid not in globals.trust_data:
        globals.trust_data[tuid] = {
            "reports": 0,
            "confirmed_matches": 0,
            "afk": 0,
            "trust_score": 100
        }

    globals.trust_data[tuid]["reports"] += 1
    save_trust()
    if context:
        await recalculate_trust_score(target_id, context, reason="–ø–æ–ª—É—á–µ–Ω —Ä–µ–ø–æ—Ä—Ç")
    else:
        await recalculate_trust_score(target_id)

    return "success"


async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reporter_id = update.effective_user.id
    args = context.args

    if not args:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report \"<–Ω–∏–∫ –∏–ª–∏ ID>\" [–ø—Ä–∏—á–∏–Ω–∞]"
        )
        return

    text = " ".join(args)
    if text.startswith('"') and '"' in text[1:]:
        identifier, reason = text[1:].split('"', 1)
        identifier = identifier.strip()
        reason = reason.strip() or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–∏–∫ –∏–ª–∏ ID –≤ –∫–∞–≤—ã—á–∫–∞—Ö:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            '/report "Player One" –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞\n'
            '/report "6239004979" —Å–ø–∞–º–∏—Ç –≤ —á–∞—Ç\n'
            '/report "@nickname" —á–∏—Ç–µ—Ä–∏—Ç'
        )
        return

    target_id = resolve_user_id(identifier)
    if target_id is None:
        await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∏–ª–∏ –Ω–∏–∫ —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ.")
        return

    if reporter_id == target_id:
        await update.message.reply_text("üòÖ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    result = await report_player(reporter_id, target_id, reason, context)

    if result == "already_reported":
        await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        await update.message.reply_text(f"‚úÖ –ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞ {target_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
