from __future__ import annotations
from html import escape as _escape
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, User
from telegram.constants import ChatMemberStatus
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from components.webapp_button import post_welcome_button
from telegram.ext import CallbackQueryHandler
from telegram.error import TelegramError, Forbidden
from utils.mentions import mention


import logging
import time
from core import globals

logger = logging.getLogger("team_chat")

USED_TEAM_CHAT_IDS = set()
WELCOME_MSG_IDS: dict[int, int] = {}   # chat_id -> message_id –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π ¬´—à–∞–ø–∫–∏¬ª
_WELCOME_REFRESHED_AT: dict[int, float] = {}
_WELCOME_REFRESH_COOLDOWN = 5.0


# ---------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ---------------------------

def chat_in_use(chat_id: int) -> bool:
    for match in globals.active_matches_5v5.values():
        if chat_id == match.get("blue_chat_id") or chat_id == match.get("red_chat_id"):
            return True
    if chat_id in USED_TEAM_CHAT_IDS:
        return True
    return False


def _find_match_and_side_by_chat(chat_id: int):
    """–ù–∞–π—Ç–∏ (match_id, match, side) –ø–æ chat_id (blue_chat_id/red_chat_id)."""
    for mid, match in globals.active_matches_5v5.items():
        if match.get("blue_chat_id") == chat_id:
            return mid, match, "blue"
        if match.get("red_chat_id") == chat_id:
            return mid, match, "red"
    return None, None, None

def _team_list(match: dict, side: str) -> list[dict]:
    """
    –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º –º–∞—Ç—á-–æ–±—ä–µ–∫—Ç–∞.
    """
    return (
        match.get(f"{side}_team")
        or match.get(side)
        or (match.get("teams") or {}).get(side)
        or match.get(f"team_{side}")
        or []
    )




def _build_welcome_text_html(chat_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è @username, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <i>–∫—É—Ä—Å–∏–≤</i>).
    –®–∞–±–ª–æ–Ω:

    üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –º–∞—Ç—á–∞!

    üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:
    - @...
    ...
    üÜî –õ–∏–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—é–¥–∞ ID –ª–æ–±–±–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Å—Ç –∏–≥—Ä—É.

    ‚ö†Ô∏è <i>–≠—Ç–æ—Ç —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π! –ü–æ—Å–ª–µ –º–∞—Ç—á–∞ –±–æ—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫–∏–Ω–µ—Ç —á–∞—Ç.</i>
    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ!
    """
    mid, match, side = _find_match_and_side_by_chat(chat_id)

    header = "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –º–∞—Ç—á–∞!"
    lines = [header, "", "üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:"]

    members_lines = []
    captain_id = None
    leader_id = None
    if match and side:
        captain_id = match.get("captains", {}).get(side)
        leader_id = match.get("lobby_leaders", {}).get(side)

        # match[side] ‚Äî —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å–ª–æ–≤–∞—Ä—è–º–∏ —Å –∫–ª—é—á–æ–º user_id
        for p in _team_list(match, side):
            uid = int(p.get("user_id"))
            uname = p.get("username")
            full_name = p.get("name") or p.get("full_name") or p.get("first_name")
            tag = mention(uid, uname, full_name)   # ‚üµ –î–ï–õ–ê–ï–¢ –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–û
            if uid == captain_id:
                tag += " (–ö–∞–ø–∏—Ç–∞–Ω)"
            members_lines.append(f"- {tag}")


    if not members_lines:
        members_lines.append("- –∫–æ–º–∞–Ω–¥–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")

    lines.extend(members_lines)
    lines.append("")

    # –õ–∏–¥–µ—Ä—Å–∫–∞—è —Å—Ç—Ä–æ–∫–∞
    if leader_id and match and side:
        # –∏—â–µ–º –ª–∏–¥–µ—Ä–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ (–≤–¥—Ä—É–≥ –µ—Å—Ç—å username)
        leader_uname = None
        for p in match.get(side, []):
            if p.get("user_id") == leader_id:
                leader_uname = p.get("username") or None
                break
        who = mention(int(leader_id), leader_uname, None)
        leader_line = f"üÜî {who} –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—é–¥–∞ ID –ª–æ–±–±–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Å—Ç –∏–≥—Ä—É."
    else:
        leader_line = "üÜî –õ–∏–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—é–¥–∞ ID –ª–æ–±–±–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Å—Ç –∏–≥—Ä—É."
    lines.append(leader_line)
    lines.append("")

    warn = "<i>–≠—Ç–æ—Ç —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π! –ü–æ—Å–ª–µ –º–∞—Ç—á–∞ –±–æ—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫–∏–Ω–µ—Ç —á–∞—Ç.</i>"
    tail = "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ!"
    lines.append(f"‚ö†Ô∏è {warn}")
    lines.append(tail)

    # HTML –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è @username; –º—ã –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–≤–æ–¥–∞.
    return "\n".join(lines)


# –ê–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç: (chat_id, user_id) -> ts
_RECENT: dict[tuple[int, int], float] = {}
_TTL = 300.0  # 5 –º–∏–Ω—É—Ç

def _should_welcome(chat_id: int, user_id: int) -> bool:
    now = time.time()
    key = (chat_id, user_id)
    if now - _RECENT.get(key, 0) < _TTL:
        return False
    _RECENT[key] = now
    return True

def _should_refresh_welcome(chat_id: int) -> bool:
    now = time.time()
    last = _WELCOME_REFRESHED_AT.get(chat_id, 0.0)
    if now - last < _WELCOME_REFRESH_COOLDOWN:
        return False
    _WELCOME_REFRESHED_AT[chat_id] = now
    return True


async def _send_welcome_for(chat_id: int, user: User, context: ContextTypes.DEFAULT_TYPE):
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–µ—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ WebApp –≤–≤–µ—Ä—Ö—É —á–∞—Ç–∞.
    return



# ---------------------------
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ---------------------------

async def create_team_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat = update.effective_chat

    if chat.type != "supergroup":
        await update.message.reply_text(
            "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    if chat_in_use(chat.id):
        await update.message.reply_text(
            "‚ùó –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –º–∞—Ç—á–∞ –∏ —Ç–µ–ø–µ—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    match_id = None
    team = None
    for mid, match in globals.active_matches_5v5.items():
        for side in ("blue", "red"):
            if match["captains"].get(side) == user_id:
                match_id = mid
                team = side
                break
        if match_id:
            break

    if not match_id:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∫–∞–ø–∏—Ç–∞–Ω –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞.")
        return

    bm = await context.bot.get_chat_member(chat.id, context.bot.id)
    if bm.status != ChatMemberStatus.ADMINISTRATOR:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–Ω–∞—á–µ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
        )
        return

    try:
        await context.bot.set_chat_title(chat.id, f"Team {team.upper()}")
    except TelegramError:
        pass

    globals.active_matches_5v5[match_id][f"{team}_chat_id"] = chat.id
    USED_TEAM_CHAT_IDS.add(chat.id)

    try:
        link = await context.bot.export_chat_invite_link(chat.id)
    except TelegramError:
        link = None

    teammates = [p.get("user_id") for p in globals.active_matches_5v5[match_id][team]]

    # –†–∞–∑–æ—Å–ª–∞—Ç—å —Ç–æ–≤–∞—Ä–∏—â–∞–º —Å—Å—ã–ª–∫—É (–∫—Ä–æ–º–µ –∫–∞–ø–∏—Ç–∞–Ω–∞)
    for uid in teammates:
        if uid != user_id:
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"üëã –í–∞—à –∫–∞–ø–∏—Ç–∞–Ω —Å–æ–∑–¥–∞–ª —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: {link}"
                )
            except TelegramError:
                pass

    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –ø—Ä–∏–≤–µ—Ç–∫—É ‚Äî –æ–Ω–∞ –ø—Ä–∏–ª–µ—Ç–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –ø–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—é
    await context.bot.send_message(chat.id, "‚úÖ –ß–∞—Ç –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –º–∞—Ç—á—É.")

    # === [–ù–û–í–û–ï] === –û–î–ù–û –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π WebApp –≤ —ç—Ç–æ—Ç —á–∞—Ç
    match = globals.active_matches_5v5[match_id]   # –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞
    team_side = team                               # "blue" –∏–ª–∏ "red"
    roster = build_roster_for_side(match, team_side)
    try:
        await _post_or_pin_welcome(
            context=context,
            chat_id=chat.id,
            match_id=str(match_id),
            team_side=team_side,
            roster=roster
        )
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —à–∞–ø–∫—É –≤ —á–∞—Ç {chat.id}: {e}")

    
    # –ï—Å–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ —á–∞—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–∞–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ ID
    match = globals.active_matches_5v5[match_id]
    if match.get("blue_chat_id") and match.get("red_chat_id"):
        for side in ("blue", "red"):
            leader_id = match.get('lobby_leaders', {}).get(side)
            chat_id = match.get(f"{side}_chat_id")
            if leader_id and chat_id:
                if any(p.get("user_id") == leader_id for p in _team_list(match, side)):
                    kb = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì• –í–≤–µ—Å—Ç–∏ ID –ª–æ–±–±–∏", callback_data=f"enter_lobby_id_{match_id}")]
                    ])
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="üì® –õ–∏–¥–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ ID –ª–æ–±–±–∏:",
                            reply_markup=kb
                        )
                    except Exception:
                        pass


async def verify_team_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    bm = await context.bot.get_chat_member(chat_id, context.bot.id)
    if bm.status not in ("administrator", "creator"):
        await update.message.reply_text("‚õî –ù—É–∂–Ω–æ –¥–∞—Ç—å –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    for match_id, match in globals.active_matches_5v5.items():
        for side in ("blue", "red"):
            if match["captains"].get(side) == user_id and not match.get(f"{side}_chat_id"):
                if chat_in_use(chat_id):
                    await update.message.reply_text(
                        "‚ùó –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –º–∞—Ç—á—É. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç."
                    )
                    return
                globals.active_matches_5v5[match_id][f"{side}_chat_id"] = chat_id
                USED_TEAM_CHAT_IDS.add(chat_id)
                try:
                    link = await context.bot.export_chat_invite_link(chat_id)
                except TelegramError:
                    link = None

                teammates = [p.get("user_id") for p in match[side]]
                for uid in teammates:
                    if uid != user_id:
                        try:
                            await context.bot.send_message(chat_id=uid, text=f"üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–∞—Ç—É –∫–æ–º–∞–Ω–¥—ã: {link}")
                        except TelegramError:
                            pass
                await context.bot.send_message(chat_id, "üì£ –¢–æ–≤–∞—Ä–∏—â–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É.")

                team_side = side
                roster = build_roster_for_side(match, team_side)
                try:
                    await _post_or_pin_welcome(
                        context=context,
                        chat_id=chat_id,
                        match_id=str(match_id),
                        team_side=team_side,
                        roster=roster
                    )
                except Exception as e:
                    logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —à–∞–ø–∫—É –≤ —á–∞—Ç {chat_id}: {e}")


                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ª–∏–¥–µ—Ä–∞ ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                if match.get("blue_chat_id") and match.get("red_chat_id"):
                    for side2 in ("blue", "red"):
                        leader_id = match.get('lobby_leaders', {}).get(side2)
                        chat_id2 = match.get(f"{side2}_chat_id")
                        if leader_id and chat_id2:
                            if any(p.get("user_id") == leader_id for p in _team_list(match, side2)):
                                kb = InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üì• –í–≤–µ—Å—Ç–∏ ID –ª–æ–±–±–∏", callback_data=f"enter_lobby_id_{match_id}")]
                                ])
                                try:
                                    await context.bot.send_message(
                                        chat_id=chat_id2,
                                        text="üì® –õ–∏–¥–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ ID –ª–æ–±–±–∏:",
                                        reply_markup=kb
                                    )
                                except Exception:
                                    pass
                return
    await update.message.reply_text("‚ö†Ô∏è –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def process_match_ready(match_id: str, context: ContextTypes.DEFAULT_TYPE):
    match = globals.active_matches_5v5.get(match_id)
    if not match:
        return
    for side in ('blue', 'red'):
        cap = match['captains'][side]
        try:
            await context.bot.send_message(
                chat_id=cap,
                text=(
                    f"üîî –í—ã –∫–∞–ø–∏—Ç–∞–Ω {side.upper()}!\n"
                    "1. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.\n"
                    "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.\n"
                    "3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /verify –≤ —á–∞—Ç–µ."
                )
            )
        except TelegramError:
            pass


async def handle_lobby_id_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.id
    match_id = query.data.split('_')[-1]
    match = globals.active_matches_5v5.get(match_id)
    if not match:
        return
    for side in ("blue", "red"):
        if match.get('lobby_leaders', {}).get(side) == user:
            globals.waiting_lobby_id[user] = match_id
            await context.bot.send_message(
                chat_id=match[f"{side}_chat_id"],
                text="üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ª–æ–±–±–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456"
            )
            break


async def handle_lobby_id_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = (update.message.text or "").strip()
    match_id = globals.waiting_lobby_id.pop(user_id, None)
    if not match_id or not text.isdigit():
        return
    match = globals.active_matches_5v5.get(match_id)
    side = 'blue' if match['lobby_leaders']['blue'] == user_id else 'red'
    match['lobby_ids'][side] = text
    for s in ('blue', 'red'):
        cid = match.get(f"{s}_chat_id")
        if cid:
            try:
                await context.bot.send_message(
                    chat_id=cid,
                    text=f"üéÆ ID –ª–æ–±–±–∏ –æ—Ç {side.upper()}: {text}"
                )
            except Exception:
                pass

handle_lobby_id = handle_lobby_id_message


async def cleanup_team_chats(match_id: str, context: ContextTypes.DEFAULT_TYPE):
    match = globals.active_matches_5v5.pop(match_id, None)
    if not match:
        return

    for side in ("blue", "red"):
        cid = match.get(f"{side}_chat_id")
        if not cid:
            continue

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        try:
            bot_member = await context.bot.get_chat_member(cid, context.bot.id)
            bot_can_restrict = getattr(bot_member, "can_restrict_members", False) or (bot_member.status == "administrator")
        except Exception:
            bot_can_restrict = False

        if bot_can_restrict:
            # –ö–∏–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–µ –±–æ—Ç–∞)
            for player in match[side]:
                uid = player.get("user_id")
                if not uid or uid == context.bot.id:
                    continue
                try:
                    member = await context.bot.get_chat_member(cid, uid)
                    if member.status in ("creator", "administrator"):
                        continue
                    await context.bot.ban_chat_member(cid, uid)
                    await context.bot.unban_chat_member(cid, uid)
                except TelegramError:
                    pass
        else:
            logger.info(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–∞–Ω –≤ —á–∞—Ç–µ {cid}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –∫–∏–∫.")

        # –ö–∏–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –±–æ—Ç–∞ (–∫–∞–∫ –±—ã–ª–æ)
        try:
            admins = await context.bot.get_chat_administrators(cid)
            for m in admins:
                if (
                    not m.user.is_bot
                    and m.status != "creator"
                    and m.user.id != context.bot.id
                ):
                    try:
                        await context.bot.ban_chat_member(cid, m.user.id)
                        await context.bot.unban_chat_member(cid, m.user.id)
                    except TelegramError:
                        pass
        except Exception:
            pass

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥ –±–æ—Ç–∞
        try:
            await context.bot.send_message(chat_id=cid, text="üßπ –ú–∞—Ç—á –æ–∫–æ–Ω—á–µ–Ω. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç.")
        except Exception:
            pass

        USED_TEAM_CHAT_IDS.add(cid)
        try:
            await context.bot.leave_chat(cid)
        except TelegramError:
            pass


# ---------------------------
# –ü–†–ò–í–ï–¢–ö–ê –ü–û –§–ê–ö–¢–£ –í–°–¢–£–ü–õ–ï–ù–ò–Ø
# ---------------------------

async def handle_new_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–±—ã—Ç–∏–µ message.new_chat_members: –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç."""
    msg = update.effective_message
    chat = update.effective_chat
    if not msg or not chat:
        return

    # –¥–µ—Ä–∂–∏–º ¬´—à–∞–ø–∫—É¬ª –Ω–∞–≤–µ—Ä—Ö—É (–¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ —Å —Å–∫—Ä—ã—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–∑–∞–ø–æ—Å—Ç–∏–º)
    try:
        mid, match, side = _find_match_and_side_by_chat(chat.id)
        if match and side:
            roster = build_roster_for_side(match, side)
            if not WELCOME_MSG_IDS.get(chat.id) or _should_refresh_welcome(chat.id):
                await _post_or_pin_welcome(
                    context,
                    chat.id,
                    mid,
                    side,
                    roster,
                    force_repost=True,
                )
            else:
                msg_id = WELCOME_MSG_IDS.get(chat.id)
                if msg_id:
                    await context.bot.pin_chat_message(chat.id, msg_id, disable_notification=True)
        else:
            msg_id = WELCOME_MSG_IDS.get(chat.id)
            if msg_id:
                await context.bot.pin_chat_message(chat.id, msg_id, disable_notification=True)
    except Exception:
        pass

    # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∫–∞–∂–¥–æ–º—É –≤–æ—à–µ–¥—à–µ–º—É (–õ–° -> –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è, —Ç–∏—Ö–æ –≤ —á–∞—Ç)
    for m in (msg.new_chat_members or []):
        if m.is_bot:
            continue
        if not _should_welcome(chat.id, m.id):
            continue
        await _hint_for_newcomer(chat.id, m, context)




async def handle_team_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–±—ã—Ç–∏–µ chat_member: approve/join –ø–æ –∏–Ω–≤–∞–π—Ç—É –∏ —Ç.–ø."""
    cmu = update.chat_member
    if not cmu:
        return
    chat = cmu.chat
    old = cmu.old_chat_member.status
    new = cmu.new_chat_member.status
    became_member = (new in ("member", "administrator", "creator")) and (old not in ("member", "administrator", "creator"))
    if not became_member:
        return
    user = cmu.new_chat_member.user
    if user.is_bot:
        return
    if not _should_welcome(chat.id, user.id):
        return

    # –¥–µ—Ä–∂–∏–º ¬´—à–∞–ø–∫—É¬ª –Ω–∞–≤–µ—Ä—Ö—É
    try:
        mid, match, side = _find_match_and_side_by_chat(chat.id)
        if match and side:
            roster = build_roster_for_side(match, side)
            if not WELCOME_MSG_IDS.get(chat.id) or _should_refresh_welcome(chat.id):
                await _post_or_pin_welcome(
                    context,
                    chat.id,
                    mid,
                    side,
                    roster,
                    force_repost=True,
                )
            else:
                msg_id = WELCOME_MSG_IDS.get(chat.id)
                if msg_id:
                    await context.bot.pin_chat_message(chat.id, msg_id, disable_notification=True)
        else:
            msg_id = WELCOME_MSG_IDS.get(chat.id)
            if msg_id:
                await context.bot.pin_chat_message(chat.id, msg_id, disable_notification=True)
    except Exception:
        pass

    # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–æ–≤–∏—á–∫—É
    try:
        await context.bot.send_message(
            chat_id=chat.id,
            text=f"üëã {_mention_html(user)} –ø—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üìã –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç–∫—É¬ª –≤ –∑–∞–∫—Ä–µ–ø–µ ‚Üë",
            parse_mode="HTML",
            disable_notification=True
        )
    except Exception:
        pass




def _extract_user_id(member: dict) -> int | None:
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã—Ç–∞—â–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π telegram-id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º —Å–ª–æ–≤–∞—Ä—è."""
    candidate_keys = (
        "user_id",
        "id",
        "uid",
        "tg_id",
        "telegram_id",
        "telegram_user_id",
        "player_id",
    )
    raw_uid = None
    for key in candidate_keys:
        raw_uid = member.get(key)
        if raw_uid not in (None, "", 0):
            break
    else:
        raw_uid = None

    if raw_uid is None:
        return None

    # –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
    try:
        uid = int(str(raw_uid).strip())
        return uid if uid > 0 else None
    except Exception:
        pass

    # –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "id:123456" ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ü–∏—Ñ—Ä—ã
    digits = "".join(ch for ch in str(raw_uid) if ch.isdigit())
    if not digits:
        return None
    try:
        uid = int(digits)
        return uid if uid > 0 else None
    except Exception:
        return None


def build_roster_for_side(match: dict, side: str) -> list[dict]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    user_id -> –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ int.
    """
    team = _team_list(match, side)
    roster = []
    for m in team:        
        uid = _extract_user_id(m)
        roster.append({
            "user_id": uid,
            "username": m.get("username"),
            "name": m.get("name") or m.get("full_name") or m.get("first_name"),
        })
    return roster



def _short_personal_text(match: dict, side: str, user_id: int) -> str:
    """
    –î–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ–ø-–∞–ø–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~200 —Å–∏–º–≤–æ–ª–æ–≤).
    """
    role = (match.get("roles") or {}).get(str(user_id)) or (match.get("roles") or {}).get(user_id) or "‚Äî"
    lobby_id = match.get("lobby_id") or match.get(f"{side}_lobby_id") or "‚Äî"

    # –°–æ—Å—Ç–∞–≤ ‚Äî –≤–æ–∑—å–º—ë–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–∏–º–º–µ–π—Ç–∞, –±–µ–∑ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    team_list = _team_list(match, side)
    names = []
    for m in team_list:
        uid = str(m.get("user_id") or m.get("id") or m.get("uid"))
        if uid == str(user_id):
            continue
        label = ("@" + m["username"]) if m.get("username") else (m.get("name") or m.get("full_name") or "–∏–≥—Ä–æ–∫")
        names.append(label)
        if len(names) >= 3:
            break
    mates = ", ".join(names) if names else "‚Äî"

    txt = f"–†–æ–ª—å: {role}\n–õ–æ–±–±–∏: {lobby_id}\n–¢–∏–º–º–µ–π—Ç—ã: {mates}"
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–¥—Ä–µ–∂–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–≥–Ω—É–ª–∏
    return (txt[:195] + "‚Ä¶") if len(txt) > 200 else txt


async def handle_open_welcome_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query

    data = (q.data or "")
    parts = data.split(":")
    if len(parts) != 3 or parts[0] != "open_welcome":
        await q.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    match_id, side = parts[1], parts[2]
    from core import globals
    match = globals.active_matches_5v5.get(match_id)
    if not match:
        await q.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_id = q.from_user.id
    text = _short_personal_text(match, side, user_id)
    if not text:
        text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."

    # –í–ê–ñ–ù–û: —Ç–æ–ª—å–∫–æ –û–î–ò–ù –æ—Ç–≤–µ—Ç ‚Äî —Å—Ä–∞–∑—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ø-–∞–ø–∞
    await q.answer(text=text, show_alert=True)

async def _post_or_pin_welcome(
    context,
    chat_id: int,
    match_id: str,
    team_side: str,
    roster: list[dict],
    *,
    force_repost: bool = False,
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å/–∑–∞–ø–∏–Ω–∏—Ç—å ¬´—à–∞–ø–∫—É¬ª —Å –∫–Ω–æ–ø–∫–æ–π –∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –µ—ë message_id."""
    old_msg_id = WELCOME_MSG_IDS.get(chat_id)

    if old_msg_id and force_repost:
        try:
            await context.bot.unpin_chat_message(chat_id, old_msg_id)
        except Exception:
            pass
        try:
            await context.bot.delete_message(chat_id, old_msg_id)
        except Exception:
            pass
        old_msg_id = None

    if old_msg_id and not force_repost:
        try:
            await context.bot.pin_chat_message(chat_id, old_msg_id, disable_notification=True)
            return
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏–Ω–∏—Ç—å (—É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é) ‚Äî –∑–∞–ø–æ—Å—Ç–∏–º –∑–∞–Ω–æ–≤–æ
            old_msg_id = None

    try:
        msg = await post_welcome_button(
            context=context,
            chat_id=chat_id,
            match_id=str(match_id),
            team_side=team_side,
            roster=roster,
        )
        WELCOME_MSG_IDS[chat_id] = msg.message_id
        _WELCOME_REFRESHED_AT[chat_id] = time.time()
        try:
            await context.bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except Exception:
            pass
    except Exception:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–æ—á–Ω—É—é —à–∞–ø–∫—É –≤ —á–∞—Ç {chat_id}")


def _mention_html(user: User) -> str:
    label = ("@" + user.username) if user.username else (user.full_name or "–∏–≥—Ä–æ–∫")
    return f'<a href="tg://user?id={user.id}">{_escape(label)}</a>'


async def _hint_for_newcomer(chat_id: int, user: User, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üëã {_mention_html(user)} –ø—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üìã –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç–∫—É¬ª –≤ –∑–∞–∫—Ä–µ–ø–µ ‚Üë",
            parse_mode="HTML",
            disable_notification=True,
        )
    except Exception:
        pass
