from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatMemberStatus
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from telegram.helpers import escape_markdown

import logging
from core import globals

logger = logging.getLogger("team_chat")

USED_TEAM_CHAT_IDS = set()

def chat_in_use(chat_id):
    for match in globals.active_matches_5v5.values():
        if chat_id == match.get("blue_chat_id") or chat_id == match.get("red_chat_id"):
            return True
    if chat_id in USED_TEAM_CHAT_IDS:
        return True
    return False

async def create_team_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat = update.effective_chat

    if chat.type != "supergroup":
        await update.message.reply_text(
            "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–≤–Ω—É—Ç—Ä–∏* –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode="Markdown"
        )
        return

    if chat_in_use(chat.id):
        await update.message.reply_text(
            "‚ùó –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –º–∞—Ç—á–∞ –∏ —Ç–µ–ø–µ—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode="Markdown"
        )
        return

    match_id = None
    team = None
    for mid, match in globals.active_matches_5v5.items():
        for side in ("blue", "red"):
            if match["captains"].get(side) == user_id:
                match_id = mid
                team = side
                break
        if match_id:
            break

    if not match_id:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∫–∞–ø–∏—Ç–∞–Ω –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞.")
        return

    bm = await context.bot.get_chat_member(chat.id, context.bot.id)
    if bm.status != ChatMemberStatus.ADMINISTRATOR:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–Ω–∞—á–µ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
            parse_mode="Markdown"
        )
        return

    try:
        await context.bot.set_chat_title(chat.id, f"Team {team.upper()}")
    except TelegramError:
        pass

    globals.active_matches_5v5[match_id][f"{team}_chat_id"] = chat.id
    USED_TEAM_CHAT_IDS.add(chat.id)

    try:
        link = await context.bot.export_chat_invite_link(chat.id)
    except TelegramError:
        link = None

    teammates = [p.get("user_id") for p in globals.active_matches_5v5[match_id][team]]

    for uid in teammates:
        if uid != user_id:
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"üëã –í–∞—à –∫–∞–ø–∏—Ç–∞–Ω —Å–æ–∑–¥–∞–ª —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: {link}"
                )
            except TelegramError:
                pass

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    members_text = ""
    for uid in teammates:
        try:
            member = await context.bot.get_chat_member(chat.id, uid)
            uname = member.user.username or f"id{uid}"
        except Exception:
            uname = f"id{uid}"
        members_text += f"- @{uname}"
        if uid == user_id:
            members_text += " (–ö–∞–ø–∏—Ç–∞–Ω)"
        members_text += "\n"
    welcome_text = (
        "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –º–∞—Ç—á–∞!\n\n"
        "üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"{members_text}\n"
        "üÜî –õ–∏–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—é–¥–∞ ID –ª–æ–±–±–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Å—Ç –∏–≥—Ä—É.\n\n"
        "‚ö†Ô∏è *–≠—Ç–æ—Ç —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π! –ü–æ—Å–ª–µ –º–∞—Ç—á–∞ –±–æ—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫–∏–Ω–µ—Ç —á–∞—Ç.*\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ!"
    )
    await context.bot.send_message(chat_id=chat.id, text=welcome_text, parse_mode="Markdown")

    await context.bot.send_message(
        chat_id=chat.id,
        text="‚úÖ –ß–∞—Ç –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –º–∞—Ç—á—É."
    )

    # –ï—Å–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ —á–∞—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–∞–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ ID
    match = globals.active_matches_5v5[match_id]
    if match.get("blue_chat_id") and match.get("red_chat_id"):
        for side in ("blue", "red"):
            leader_id = match.get('lobby_leaders', {}).get(side)
            chat_id = match.get(f"{side}_chat_id")
            if leader_id and chat_id:
                # –õ–∏–¥–µ—Ä —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ —Å–æ—Å—Ç–∞–≤–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
                if any(p.get("user_id") == leader_id for p in match[side]):
                    kb = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì• –í–≤–µ—Å—Ç–∏ ID –ª–æ–±–±–∏", callback_data=f"enter_lobby_id_{match_id}")]
                    ])
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="üì® –õ–∏–¥–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ ID –ª–æ–±–±–∏:",
                            reply_markup=kb
                        )
                    except Exception:
                        pass

async def verify_team_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    bm = await context.bot.get_chat_member(chat_id, context.bot.id)
    if bm.status not in ("administrator", "creator"):
        await update.message.reply_text(
            "‚õî –ù—É–∂–Ω–æ –¥–∞—Ç—å –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="Markdown"
        )
        return
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    for match_id, match in globals.active_matches_5v5.items():
        for side in ("blue", "red"):
            if match["captains"].get(side) == user_id and not match.get(f"{side}_chat_id"):
                if chat_in_use(chat_id):
                    await update.message.reply_text(
                        "‚ùó –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –º–∞—Ç—á—É. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.",
                        parse_mode="Markdown"
                    )
                    return
                globals.active_matches_5v5[match_id][f"{side}_chat_id"] = chat_id
                USED_TEAM_CHAT_IDS.add(chat_id)
                try:
                    link = await context.bot.export_chat_invite_link(chat_id)
                except TelegramError:
                    link = None

                teammates = [p.get("user_id") for p in match[side]]
                for uid in teammates:
                    if uid != user_id:
                        try:
                            await context.bot.send_message(chat_id=uid, text=f"üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–∞—Ç—É –∫–æ–º–∞–Ω–¥—ã: {link}")
                        except TelegramError:
                            pass
                await context.bot.send_message(chat_id, "üì£ –¢–æ–≤–∞—Ä–∏—â–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É.")

                # --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                members_text = ""
                for uid in teammates:
                    try:
                        member = await context.bot.get_chat_member(chat_id, uid)
                        uname = member.user.username or f"id{uid}"
                    except Exception:
                        uname = f"id{uid}"
                    members_text += f"- @{uname}"
                    if uid == user_id:
                        members_text += " (–ö–∞–ø–∏—Ç–∞–Ω)"
                    members_text += "\n"
                welcome_text = (
                    "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –º–∞—Ç—á–∞!\n\n"
                    "üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:\n"
                    f"{members_text}\n"
                    "üÜî –õ–∏–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—é–¥–∞ ID –ª–æ–±–±–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Å—Ç –∏–≥—Ä—É.\n\n"
                    "‚ö†Ô∏è *–≠—Ç–æ—Ç —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π! –ü–æ—Å–ª–µ –º–∞—Ç—á–∞ –±–æ—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫–∏–Ω–µ—Ç —á–∞—Ç.*\n"
                    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ!"
                )
                safe_text = escape_markdown(welcome_text, version=2)
                await context.bot.send_message(chat_id=chat_id, text=safe_text, parse_mode="MarkdownV2")
                await context.bot.send_message(chat_id, "‚úÖ –ß–∞—Ç –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –º–∞—Ç—á—É.")

                # --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ª–∏–¥–µ—Ä–∞
                if match.get("blue_chat_id") and match.get("red_chat_id"):
                    for side2 in ("blue", "red"):
                        leader_id = match.get('lobby_leaders', {}).get(side2)
                        chat_id2 = match.get(f"{side2}_chat_id")
                        if leader_id and chat_id2:
                            if any(p.get("user_id") == leader_id for p in match[side2]):
                                kb = InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üì• –í–≤–µ—Å—Ç–∏ ID –ª–æ–±–±–∏", callback_data=f"enter_lobby_id_{match_id}")]
                                ])
                                try:
                                    await context.bot.send_message(
                                        chat_id=chat_id2,
                                        text="üì® –õ–∏–¥–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ ID –ª–æ–±–±–∏:",
                                        reply_markup=kb
                                    )
                                except Exception:
                                    pass
                return
    await update.message.reply_text("‚ö†Ô∏è –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def process_match_ready(match_id: str, context: ContextTypes.DEFAULT_TYPE):
    match = globals.active_matches_5v5.get(match_id)
    if not match:
        return
    for side in ('blue', 'red'):
        cap = match['captains'][side]
        try:
            await context.bot.send_message(
                chat_id=cap,
                text=(
                    f"üîî –í—ã –∫–∞–ø–∏—Ç–∞–Ω {side.upper()}!\n"
                    "1. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.\n"
                    "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.\n"
                    "3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /verify –≤ —á–∞—Ç–µ."
                ),
                parse_mode='Markdown'
            )
        except TelegramError:
            pass

async def handle_lobby_id_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.id
    match_id = query.data.split('_')[-1]
    match = globals.active_matches_5v5.get(match_id)
    if not match:
        return
    # –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å
    for side in ("blue", "red"):
        if match.get('lobby_leaders', {}).get(side) == user:
            globals.waiting_lobby_id[user] = match_id
            await context.bot.send_message(
                chat_id=match[f"{side}_chat_id"],
                text="üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ª–æ–±–±–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ü—Ä–∏–º–µ—Ä: `123456`",
                parse_mode='Markdown'
            )
            break

async def handle_lobby_id_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    match_id = globals.waiting_lobby_id.pop(user_id, None)
    if not match_id or not text.isdigit():
        return
    match = globals.active_matches_5v5.get(match_id)
    side = 'blue' if match['lobby_leaders']['blue'] == user_id else 'red'
    match['lobby_ids'][side] = text
    for s in ('blue', 'red'):
        cid = match.get(f"{s}_chat_id")
        if cid:
            try:
                await context.bot.send_message(
                    chat_id=cid,
                    text=f"üéÆ ID –ª–æ–±–±–∏ –æ—Ç {side.upper()}: `{text}`",
                    parse_mode='Markdown'
                )
            except Exception:
                pass

handle_lobby_id = handle_lobby_id_message

async def cleanup_team_chats(match_id: str, context: ContextTypes.DEFAULT_TYPE):
    match = globals.active_matches_5v5.pop(match_id, None)
    if not match:
        return

    for side in ("blue", "red"):
        cid = match.get(f"{side}_chat_id")
        if not cid:
            continue

        # –ö–∏–∫–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for player in match[side]:
            user_id = player.get("user_id")
            if user_id and user_id != context.bot.id:
                try:
                    await context.bot.ban_chat_member(cid, user_id)
                    await context.bot.unban_chat_member(cid, user_id)
                except TelegramError:
                    pass

        # –ö–∏–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –±–æ—Ç–∞
        try:
            admins = await context.bot.get_chat_administrators(cid)
            for m in admins:
                if (
                    not m.user.is_bot
                    and m.status != "creator"
                    and m.user.id != context.bot.id
                ):
                    try:
                        await context.bot.ban_chat_member(cid, m.user.id)
                        await context.bot.unban_chat_member(cid, m.user.id)
                    except TelegramError:
                        pass
        except Exception:
            pass

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥ –±–æ—Ç–∞
        try:
            await context.bot.send_message(chat_id=cid, text="üßπ –ú–∞—Ç—á –æ–∫–æ–Ω—á–µ–Ω. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç.")
        except Exception:
            pass

        USED_TEAM_CHAT_IDS.add(cid)
        try:
            await context.bot.leave_chat(cid)
        except TelegramError:
            pass
