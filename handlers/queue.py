import time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from core import globals
from core.bans import is_banned
from core.rating import get_rating
from handlers.matchmaking import find_match_1v1, find_match_5v5

COOLDOWN_SECONDS = 5

# –ö–æ–º–∞–Ω–¥–∞ /find
async def find(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = time.time()

    if user_id in globals.user_cooldowns and now - globals.user_cooldowns[user_id] < COOLDOWN_SECONDS:
        await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
        return

    globals.user_cooldowns[user_id] = now

    keyboard = [
        [InlineKeyboardButton("üîÅ 1 –Ω–∞ 1", callback_data='mode_1v1')],
        [InlineKeyboardButton("‚öîÔ∏è 5 –Ω–∞ 5", callback_data='mode_5v5')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=reply_markup)


# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ (1v1 –∏–ª–∏ 5v5)
async def handle_mode_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    mode = query.data
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    bans = globals.bans.get(str(user_id))
    if bans:
        until = bans.get("until")
        reason = bans.get("reason", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        if until == -1:
            await query.edit_message_text(f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return
        elif until and until > now:
            unban_time = time.strftime("%Y-%m-%d %H:%M UTC", time.gmtime(until))
            await query.edit_message_text(f"üö´ –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {unban_time}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return
        else:
            del globals.bans[str(user_id)]

    is_1v1 = mode == "mode_1v1"
    queue = globals.queue_1v1 if is_1v1 else globals.queue_5v5
    other_queue = globals.queue_5v5 if is_1v1 else globals.queue_1v1

    # –£–¥–∞–ª–∏–º –∏–∑ –¥—Ä—É–≥–æ–π –æ—á–µ—Ä–µ–¥–∏
    other_queue[:] = [p for p in other_queue if p["user_id"] != user_id]

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    if any(p["user_id"] == user_id for p in queue):
        await query.edit_message_text("‚è≥ –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")
        return

    # –ö–Ω–æ–ø–∫–∞ "–≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
    keyboard = [[InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ üö™", callback_data='leave_queue')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    search_msg = await query.edit_message_text(
        "üîç –ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞..." if is_1v1 else "üõ° –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...",
        reply_markup=reply_markup
    )

    # –î–æ–±–∞–≤–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
    entry = {
        "user_id": user_id,
        "elo": get_rating(user_id),
        "joined_at": now,
        "chat_id": query.message.chat_id,
        "notify_message_id": search_msg.message_id,
    }

    if not is_1v1:
        entry.update({
            "reminder_message_id": None,
            "last_notified": 0,
        })

    queue.append(entry)

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫)
    job = context.job_queue.run_repeating(
        globals.send_search_reminder,
        interval=60,
        first=60,
        data={
            "user_id": user_id,
            "chat_id": query.message.chat_id,
        }
    )
    globals.search_jobs[user_id] = job

    
    if is_1v1:
        await find_match_1v1(context, query.message.chat_id, user_id)
    else:
        await find_match_5v5(context, query.message.chat_id, user_id)


# –í—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
async def handle_leave_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    for queue, mode_name in [(globals.queue_1v1, "1v1"), (globals.queue_5v5, "5v5")]:
        for player in queue:
            if player["user_id"] == user_id:
                queue.remove(player)

                # üßπ –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
                reminder_msg_id = player.get("reminder_message_id")
                if reminder_msg_id:
                    try:
                        await context.bot.delete_message(
                            chat_id=player["chat_id"],
                            message_id=reminder_msg_id
                        )
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

                # üß† –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ job_queue (–µ—Å–ª–∏ –µ—Å—Ç—å)
                job = globals.search_jobs.pop(user_id, None)
                if job:
                    job.schedule_removal()

                # ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞
                try:
                    await context.bot.edit_message_text(
                        chat_id=player["chat_id"],
                        message_id=player["notify_message_id"],
                        text=f"üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ üö™ {mode_name}.",
                    )
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞: {e}")
                return

    # ‚ö†Ô∏è –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏
    try:
        await query.edit_message_text("‚ö†Ô∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏.")
    except Exception as e:
        if "Message is not modified" not in str(e):
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –≤—ã—Ö–æ–¥–µ: {e}")

