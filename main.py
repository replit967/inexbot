import sys
import os
import time
import asyncio
import logging
from dotenv import load_dotenv

from handlers.team_chat import (
    create_team_chat,
    verify_team_chat,
    handle_lobby_id_prompt,
    handle_lobby_id_message,
    handle_lobby_id,
)
from handlers.admin import (
    ban_command,
    unban_command,
    clear_reports_command,
    debug_fill_5v5,
    debug_launch_match,
    debug_reset_ratings,
    end_match,
)

from handlers.profile import start, profile, top, trust, history, set_name
from handlers.report import report_command, load_report_log
from handlers.queue import find, handle_mode_choice, handle_leave_queue
from handlers.matchmaking import (
    handle_match_actions,
    handle_result_confirmation,
    find_match_1v1,
    find_match_5v5,
)
from core.trust import load_trust
from core.infractions import load_infractions, save_infractions
from core.rating import load_ratings, load_matches
from core.bans import load_bans
from core.names import load_names, load_nick_timestamps
from core import globals

from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telegram.request import HTTPXRequest

# –ü—É—Ç–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
my_bot_token = os.getenv("BOT_TOKEN")
if not my_bot_token:
    logger.critical("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env")
    sys.exit(1)

last_reset = 0  # –°–±—Ä–æ—Å –≤–∞—Ä–Ω–æ–≤


# ‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
def load_all_data():
    load_trust()
    load_infractions()
    load_ratings()
    load_matches()
    load_bans()
    load_names()
    load_nick_timestamps()
    load_report_log()
    logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")


# üìÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞ + —Å–±—Ä–æ—Å–∞ –≤–∞—Ä–Ω–æ–≤
async def matchmaking_job(context: ContextTypes.DEFAULT_TYPE):
    global last_reset
    bot = context.bot
    now = int(time.time())

    try:
        await find_match_1v1(bot)
        await find_match_5v5(bot)

        if now - last_reset >= 86400:
            for uid in globals.infractions:
                globals.infractions[uid]["warnings"] = 0
                globals.infractions[uid]["last_reset"] = now
            save_infractions()
            last_reset = now
            logger.info("üîÅ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±–Ω—É–ª–µ–Ω—ã")

    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ matchmaking_job")


# üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    request = HTTPXRequest(connect_timeout=5.0, read_timeout=10.0)

    app = Application.builder() \
        .token(my_bot_token) \
        .request(request) \
        .concurrent_updates(True) \
        .build()

    globals.job_queue = app.job_queue

    from handlers.matchmaking import send_search_reminder
    globals.send_search_reminder = send_search_reminder

    load_all_data()

    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("trust", trust))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("setname", set_name))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(CommandHandler("find", find))

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∏ debug-–∫–æ–º–∞–Ω–¥—ã (–æ–¥–Ω–æ –º–µ—Å—Ç–æ!)
    ADMIN_COMMANDS = [
        ("ban", ban_command),
        ("unban", unban_command),
        ("clearreports", clear_reports_command),
        ("debug_fill_5v5", debug_fill_5v5),
        ("debug_launch_match", debug_launch_match),
        ("reset_ratings", debug_reset_ratings),
        ("end_match", end_match),
    ]
    for cmd, handler in ADMIN_COMMANDS:
        app.add_handler(CommandHandler(cmd, handler))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
    app.add_handler(CommandHandler("create_team_chat", create_team_chat))
    app.add_handler(CommandHandler("verify", verify_team_chat))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ ID –ª–æ–±–±–∏
    app.add_handler(
        MessageHandler(filters.TEXT & filters.ChatType.GROUPS,
                       handle_lobby_id_message))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.ChatType.GROUPS,
                       handle_lobby_id))
    app.add_handler(
        CallbackQueryHandler(handle_lobby_id_prompt,
                             pattern="^enter_lobby_id_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(handle_mode_choice, pattern="^mode_"))
    app.add_handler(CallbackQueryHandler(handle_leave_queue,
                                         pattern="^leave_"))
    app.add_handler(
        CallbackQueryHandler(handle_match_actions, pattern="^(ready|cancel)_"))
    app.add_handler(
        CallbackQueryHandler(handle_result_confirmation,
                             pattern="^(report_win|confirm_win|reject_win)_"))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    app.job_queue.run_repeating(matchmaking_job, interval=30, first=0)

    # –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    async def on_shutdown(app_: Application):
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    app.post_shutdown = on_shutdown

    # ‚úÖ –ó–∞–ø—É—Å–∫
    await app.run_polling()


# üß† –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        import nest_asyncio
        nest_asyncio.apply()  # ‚Üê –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç event loop'–æ–≤

        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("‚õîÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
